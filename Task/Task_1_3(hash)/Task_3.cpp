#include"Task_3.h"

/*
Задача 3. Упрощённый алгоритм Рабина-Карпа
В этом задании вам нужно реализовать функцию, которая находит 
в предоставленной строке заданную подстроку с помощью упрощённого 
алгоритма Рабина-Карпа. Назовём её find_substring_light_rabin_karp.

Функция должна принимать на вход две строки: в одной вы будете искать подстроку, 
а вторая будет этой подстрокой. Функция должна возвращать индекс найденной подстроки 
в строке. Если подстрока не была найдена, то возвращается -1.

После написания функции её необходимо протестировать. 
Для этого организуйте работу с пользователем. 
Попросите его ввести строку. В этой строке вы будете искать подстроки. 
Дальше попросите пользователя ввести подстроку, которую надо найти в введённой 
ранее строке. Программа должна вывести на консоль индекс найденной подстроки, 
а если подстрока не была найдена, то программа должна сообщить об этом пользователю. 
Продолжайте спрашивать у пользователя подстроку до тех пор, пока он не введёт exit. 
После того, как он ввёл exit, попытайтесь найти подстроку exit, сообщите пользователю 
о результате и завершите работу программы.

Пример работы программы
Введите строку, в которой будет осуществляться поиск: hellohellomydearfriend
Введите подстроку, которую нужно найти: hello
Подстрока hello найдена по индексу 0
Введите подстроку, которую нужно найти: lomy
Подстрока lomy найдена по индексу 8
Введите подстроку, которую нужно найти: year
Подстрока year не найдена
Введите подстроку, которую нужно найти: exit
Подстрока exit не найдена
*/

int find_substring_light_rabin_karp(const std::string& text, const std::string& text_find) {

	int res{ 0 }, p_hash{ 0 }, h_text{ 0 };

	p_hash = simple_string_hash(text_find);

	for (int i = 0; i <= (text.length() - text_find.length()); ++i) {

		if (i == 0) {
			h_text = simple_string_hash(text.substr(0, (text_find.length())) );
		}
		else {
			h_text -= text[i - 1];
			h_text += text[i + (text_find.length() - 1)];
			//std::cout << "--" << text[i - 1] << "--" << text[i + (text_find.length() - 1)] << "--" << std::endl;
		}

		if (h_text != p_hash) {
			res = -1;
		}
		else {
			for (int j = 0; j < text_find.length(); ++j) {
				if (text[i + j] != text_find[j]) {
					res = -1;
				}
				else return i;
			}
		}
	}
	return res;
}

void Task_3() {
	std::string text_var{};
	std::string text_find_var{};
	int result{ 0 };

		std::cout << "Введите строку, в которой будет осуществляться поиск: ";
		std::cin >> text_var;

	do {

		std::cout << "Введите подстроку, которую нужно найти: ";
		std::cin >> text_find_var;

		result = find_substring_light_rabin_karp(text_var, text_find_var);

		if (result > -1) {
			std::cout << "Подстрока " << text_find_var << " найдена по индексу " << result << std::endl;
		}
		else {
			std::cout << "Подстрока " << text_find_var << " не найдена" << std::endl;
		}

	} while (text_find_var != "exit");
	std::cout << std::endl;
};