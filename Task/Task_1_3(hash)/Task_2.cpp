#include"Task_2.h"

/*
Задача 2. Настоящая хэш-функция для строки
Вам нужно реализовать функцию, которая рассчитывает хэш для строки 
с помощью серьёзного алгоритма. Функция будет называться real_string_hash.

Функция должна принимать на вход строку, а возвращать хэш этой 
функции — целое число. Настоящий алгоритм вычисления хэша для строки 
выглядит так: берётся простое число p и число n — модуль. 
Простое число — число, у которого нет целых делителей, кроме единицы и самого числа. 
Затем код каждого символа строки умножается на p в степени индекса этого символа, 
полученные числа складываются. В конце берётся остаток от 
деления получившейся суммы на число n — это и будет хэш.

После написания функции её необходимо протестировать. 
Для этого организуйте работу с пользователем: попросите его задать числа p и n. 
Они будут использоваться в работе программы. Просите его ввести строку и в ответ 
выводите на консоль значение хэша этой строки, посчитанного по реализованному вами алгоритму. 
Делайте это до тех пор, пока пользователь не введёт exit. Когда пользователь введёт exit, 
посчитайте хэш этой строки, выведите его на консоль и завершите работу программы.

Поэкспериментируйте с разными значениями p и n. 
Посмотрите, что происходит, если n сделать достаточно маленьким, меньше 5.

Следите за размером используемых переменных. Размеры

Также ответ можно сохранить в массив по цифре в ячейке. 
Для хранения промежуточных значений лучше использовать uint64_t или long long

Примеры работы программы
Введите p: 29
Введите n: 1000
Введите строку: hello
Хэш строки hello = 64
Введите строку: olleh
Хэш строки olleh = 584
Введите строку: world
Хэш строки world = 324
Введите строку: w
Хэш строки w = 119
Введите строку: exit
Хэш строки exit = 10

Введите p: 83
Введите n: 1000
Введите строку: hello
Хэш строки hello = 830
Введите строку: olleh
Хэш строки olleh = 662
Введите строку: world
Хэш строки world = 478
Введите строку: w
Хэш строки w = 119
Введите строку: exit
Хэш строки exit = 698
*/

unsigned long long real_string_hash(const int& p, const int& n, const std::string& text) {
	unsigned long long res{ 0 };

		for (int i = 0; i < text.length(); ++i) {
			res += (text[i] * pow(p, i));
			//std::cout << "--" <<res <<"--" << std::endl;	

			if ((text[i] * pow(p, i)) >= ULLONG_MAX) {
				std::cout << "Превышение значения переменной хэш функции" << std::endl;
				return 0;
			}
	}

	return (res%n);
}

bool is_Prime(int num) {
	if (num < 2) return false;
	for (int i = 2; i <= sqrt(num); i++)
		if (num % i == 0) return false;
	return true;
}

void Task_2() {

	std::string text_var{};
	int p_var{ 0 }, n_var{ 0 };
	bool ispri{ false };

	do {
		std::cout << "Введите p: ";
		std::cin >> p_var;
		ispri = is_Prime(p_var);
		if (ispri == false) {
			std::cout << "Вы ввели не простое число! Уточнитие ввод!" << std ::endl;
		}
	} while (!ispri);

	std::cout << "Введите n: ";
	std::cin >> n_var;

	do {
		std::cout << "Введите строку: ";
		std::cin >> text_var;
		std::cout << "Хэш строки " << text_var << " = " << real_string_hash(p_var, n_var, text_var) << std::endl;

	} while (text_var != "exit");
	std::cout << std::endl;


};